// ejercicio 1 a)

Funcion Objetivo: minimizar la cantidad de figuritas para el intercambio
Candidatos: vector con valor de cada figurita
Conjunto Solucion: figuritas para el intercambio
Funcion factible: el valor de todas la figuritas candidatas no sobrepasa el valor dado
Funcion seleccion: Selecciona la figurita de mayor valor
Funcion solucion: el valor de la proxima figurita para el intercambio sobrepasa el valor de dado o ya no hay mas figuritas

FUNCION intercambio(V(*), n, X): vector enteros X Entero >= 0 X entero > 0 -> entero >= 0
    i <- 1
    valorTotal <- 0
    cont <- 0
    PARA i HASTA n HACER
        figuritasSeleccionadas[i] <- 0
    MIENTRAS (valorTotal  < X ) ^ (i < n) HACER
        SI (valorTotal + V[i] <= X) ENTONCES
            figuritasSeleccionadas[i] <- figuritasSeleccionadas[i] + 1
            valorTotal <- valorTotal + V[i]
        SINO 
            i <- i+1
    PARA i HASTA n HACER
        cont <- cont + figuritasSeleccionadas[i]
    RETORNA cont

(*) se considera que el vector esta ordenado de manera decreciente

Se garantiza que este algoritmo devueve siempre la solucion para el conjunto D = {1,2,5,10,20,50} pues esta demostrado a traves del algoritmo para dar vuelto con las monedas de Euro

// b) 

si se agrega al conjunto los dos valores 25 y 7 ya no podemos garantizar la solucion optima

D = {50,27,20,10,7,5,2,1}
X = 14

CON EL ALGORITMO TENEMOS

figuritasSeleccionadas = [0,0,0,1,0,0,2,0] -> 3 figuritas en total

MIENTRAS QUE LA SOLUCION OPTIMA ES

figuritasSeleccionadas = [0,0,0,0,2,0,0,0] -> 2 figuritas en total


// ejercicio 2)

Funcion objetivo: minimizar las paradas a cargar combustible
Candidatos: arreglo con distancias entre estaciones de servicios desde el punto de partida
conjunto solucion: numero de paradas
Funcion factible: si la distancia hasta la proxima estacion es menor que la autonomia restante
Funcion seleccion: selecciona la estacion mas lejana sin quedarse sin autonomia
Funcion solucion: conjunto de estaciones de servicio donde paró a cargar combustible

FUNCION cargaCombustible (V,c,n): vector entero > 0 X entero > 0 X entero > 0 -> arreglo entero [0,1]
    auxN <- n
    i <- 1 // con esto indico que arranco con el tanque lleno
    PARA k = 1 HASTA c HACER
        estacionesCargo[k] <- 0 
    MIENTRAS ( i < c) ^ (auxN < V[i]) HACER
        SI (auxN >= V[i])
            auxN <- auxN - V[i]
        SINO
            estacionesCargo[i-1] <- 1
            auxN <- auxN - V[i] 
        i <- i + 1
    SI (auxN < V[i]) ENTONCES
        RETORNA NULO
    SINO
        RETORNA estacionesCargo

costo algoritmico:  O(n)


//EJERCICIO 3)

Funcion objetivo: maximizar el numero de actividades a realizar, realizando una por vez

Candidatos: matriz de 2xn con tareas para realizar con horas de inicio y fin (ordenada de menor a mayor por hora de fin)
conjunto solucion: conjunto de actividades a realizar

Funcion factible: si la proxima tarea empieza despues de terminar la que se eligio antes
Funcion seleccion: selecciona las tareas que terminan antes pero comienzan despues de terminar la actual
Funcion solucion: no hay mas tareas que terminen antes que no se crucen con las actuales

FUNCION planificacionTareas(n,matriz(*)): entero > 0 x matriz de enteros > 0 -> arreglo enteros [0,1]
    i <- 2
    j <- 2
    tareas[1] = 1
    PARA k = 2 HASTA n HACER
        tareas[k] <- 0
    MIENTRAS (j < n) HACER
        SI(matriz[i][j-1] < matriz[i-1][j]) ENTONCES //comparo las horas de inicio de la anterior tarea para ver si no estaré ocupado
            tareas[j] = 1
        j <- j + 1
    RETORNA tareas
FIN_FUNCION

(*) la matriz esta ordenada de forma creciente respecto a la hora de fin de las tareas