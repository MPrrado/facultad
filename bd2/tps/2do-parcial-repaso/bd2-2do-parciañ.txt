1. Calcular diferencia de días y años con EXTRACT() y AGE()
-- Diferencia en días entre fecha_fin y fecha_inicio
SELECT EXTRACT(DAY FROM AGE(fecha_fin, fecha_inicio));

-- Diferencia en años entre fecha_fin y fecha_inicio
SELECT EXTRACT(YEAR FROM AGE(fecha_fin, fecha_inicio));


2. Hora del sistema sin milisegundos (CURRENT_TIMESTAMP)
SELECT TO_CHAR(CURRENT_TIMESTAMP, 'HH24:MI:SS');


3. Fecha y hora del sistema sin milisegundos (NOW())
SELECT TO_CHAR(NOW(), 'YYYY-MM-DD HH24:MI:SS');


4. Ejemplo de función usando RETURN QUERY
-- Suponiendo una tabla 'productos' con id, nombre, precio
CREATE OR REPLACE FUNCTION get_productos_caros(min_precio NUMERIC)
RETURNS TABLE(id INTEGER, nombre VARCHAR, precio NUMERIC)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY SELECT p.id_producto, p.nombre_producto, p.precio
                 FROM productos p
                 WHERE p.precio >= min_precio;
END;
$$;

-- Ejemplo de llamada:
-- SELECT * FROM get_productos_caros(100.00);


5. Ejemplo de función usando RETURN NEXT
-- Suponiendo una tabla 'usuarios' con id, nombre
CREATE OR REPLACE FUNCTION listar_usuarios_con_prefijo(prefijo TEXT)
RETURNS TABLE(id INTEGER, nombre_completo TEXT)
LANGUAGE plpgsql
AS $$
DECLARE
    fila_usuario RECORD;
BEGIN
    FOR fila_usuario IN SELECT id, nombre FROM usuarios WHERE nombre LIKE prefijo || '%' LOOP
        nombre_completo := fila_usuario.nombre || ' (ID: ' || fila_usuario.id || ')';
        RETURN NEXT; -- Retorna la fila actual (nombre_completo)
    END LOOP;
END;
$$;

-- Ejemplo de llamada:
-- SELECT * FROM listar_usuarios_con_prefijo('J');


6. Cómo crear un trigger
-- a) Trigger que se activa antes de actualizar la columna 'fecha_alta'
CREATE TRIGGER nombre_trigger_update_fecha_alta
BEFORE UPDATE OF fecha_alta ON public.tu_tabla -- O 'internacion' en tu caso
FOR EACH ROW -- Se ejecuta por cada fila afectada
EXECUTE FUNCTION public.tu_funcion_trigger();

-- b) Trigger que se ejecuta una vez por cada consulta (no por fila)
CREATE TRIGGER nombre_trigger_por_sentencia
BEFORE INSERT OR UPDATE OR DELETE ON public.otra_tabla
FOR EACH STATEMENT -- Se ejecuta una sola vez por la operación SQL
EXECUTE FUNCTION public.otra_funcion_trigger();


7. Ejemplo corto de RECORD usando un tipo compuesto para evitar la declaración de columnas en el SELECT externo
-- PASO 1: Crear el tipo de dato compuesto
CREATE TYPE public.mi_tipo_medicamento_info AS
(
    id_medicamento integer,
    nombre_med character varying,
    precio_med numeric(8, 2)
);

-- PASO 2: Crear la función que retorna SETOF de este tipo compuesto
CREATE OR REPLACE FUNCTION get_medicamento_info(p_id INTEGER)
RETURNS SETOF public.mi_tipo_medicamento_info -- Aquí especificas el tipo compuesto
LANGUAGE plpgsql
AS $$
DECLARE
    -- La variable 'r_med' automáticamente tomará la estructura de 'mi_tipo_medicamento_info'
    r_med mi_tipo_medicamento_info;
BEGIN
    SELECT id_medicamento, nombre, precio
    INTO r_med
    FROM medicamento
    WHERE id_medicamento = p_id;

    IF FOUND THEN
        RETURN NEXT r_med; -- Retorna la fila almacenada en r_med
    END IF;
    RETURN;
END;
$$;

-- PASO 3: Cómo llamar la función SIN declarar las columnas en el SELECT externo
SELECT * FROM get_medicamento_info(1);

-- Esto es posible porque la función ya declara explícitamente el tipo de retorno compuesto.
-- La variable 'r_med' dentro de la función se adhiere a la estructura de 'mi_tipo_medicamento_info'.


