/*
a) Realice un SP para el ABM (Alta-Baja-Modificación) de las especialidades. Debe recibir dos
parámetros, el primero será el nombre de la especialidad y el segundo, en el caso de
agregar o borrar un registro, la palabra “insert” o “delete” respectivamente, o en caso de
realizar una modificación, debe ser el nuevo nombre de la especialidad que debe
reemplazar al existente (el del primer parámetro). Realice las correspondientes
validaciones. Nombre sugerido: especialidad_abm.
*/

CREATE OR REPLACE PROCEDURE public.especialidad_abm(IN nombre_especialidad character varying, IN accion character varying)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
	--controlamos que no sean vacios o nulos los datos de entrada
	IF (accion IS NULL OR accion = '' OR nombre_especialidad IS NULL OR nombre_especialidad = '')  THEN
		RAISE EXCEPTION 'ERROR los datos ingresados no deben ser nulos o vacios';
	END IF;
	IF(LOWER(accion) = 'delete') THEN
        CALL especialidad_baja(nombre_especialidad, accion);
	ELSIF(LOWER(accion) = 'insert') THEN
        CALL especialidad_alta(nombre_especialidad, accion);
	ELSE
    	CALL especialidad_modificacion(nombre_especialidad, accion);
	END IF;
	EXCEPTION
		WHEN OTHERS THEN
			RAISE EXCEPTION 'no se pudo ejecutar por %', SQLERRM;
END;
$BODY$;


CREATE OR REPLACE PROCEDURE public.especialidad_alta(IN nombre_especialidad character varying, IN accion character varying)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
    INSERT INTO especialidad (id_especialidad, especialidad)
    VALUES((SELECT MAX(id_especialidad)+1 FROM especialidad), nombre_especialidad);
    IF(FOUND) THEN  
        RAISE NOTICE 'INSERCION CON EXITO';
    ELSE
        RAISE EXCEPTION 'NO SE PUDO INSERTAR';
    END IF;
END;
$BODY$;

CREATE OR REPLACE PROCEDURE public.especialidad_baja(IN nombre_especialidad character varying, IN accion character varying)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
	DELETE FROM especialidad WHERE especialidad = nombre_especialidad;
    IF(FOUND) THEN  
        RAISE NOTICE 'BORRADO EXISOTO';
    ELSE
        RAISE EXCEPTION 'NO SE PUDO BORRAR';
    END IF;
END;
$BODY$;

CREATE OR REPLACE PROCEDURE public.especialidad_modificacion(IN nombre_especialidad character varying, IN accion character varying)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
	UPDATE especialidad SET especialidad = accion
    WHERE especialidad = nombre_especialidad;
    IF (FOUND) THEN
	    RAISE NOTICE 'ACTUALIZACION EXITOSA';
    ELSE
	    RAISE EXCEPTION 'NO SE PUDO ACTUALIZAR EL NOMBRE';
    END IF;
END;
$BODY$;


--test alta
CALL especialidad_abm('TEST', 'INSERT');
--test Baja
CALL especialidad_abm('TISIOLOGÍA', 'DELETE');
--test modificación
CALL especialidad_abm('TEST', 'TEST-MOD');

select * from especialidad;

/*
b) Realice un SP que permite realizar el alta en cualquiera de las tablas: patología,
clasificación y cargo. Debe recibir dos parámetros, el primero el nombre de la tabla en la
cual se quiere agregar la información y el segundo el valor del campo a agregar. Realice las
correspondientes validaciones. Nombre sugerido: tablas_sistema_alta.
*/


CREATE OR REPLACE PROCEDURE public.tablas_sistema_alta(IN nombre_tabla character varying, IN valor character varying)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
    IF (nombre_tabla IS NULL OR nombre_tabla = '' OR valor IS NULL OR valor = '' OR (LOWER(nombre_tabla) != 'patologia' AND LOWER(nombre_tabla) != 'clasificacion' AND LOWER(nombre_tabla) != 'cargo')) THEN
        RAISE EXCEPTION 'ERROR EL VALOR DE LOS PARAMETROS NO SON CORRECTOS, RECUERDE QUE NO DEBEN SER NULOS NI CADENAS VACIAS, TAMBIEN SOLO SON VALIDAS LAS TABLAS patologia, cargo y clasificacion';
    END IF;
    IF (LOWER(nombre_tabla) = 'patologia') THEN
        INSERT INTO patologia (id_patologia, nombre)
        VALUES ((SELECT MAX(id_patologia) + 1 FROM patologia), valor);
    END IF;
    IF (LOWER(nombre_tabla) = 'cargo') THEN
        INSERT INTO cargo (id_cargo, cargo)
        VALUES ((SELECT MAX(id_cargo) + 1 FROM cargo), valor);
    END IF;
    IF (LOWER(nombre_tabla) = 'clasificacion') THEN
        INSERT INTO clasificacion (id_clasificacion, clasificacion)
        VALUES ((SELECT MAX(id_clasificacion) + 1 FROM clasificacion), valor);
    END IF;
    IF (FOUND) THEN
        RAISE NOTICE 'CARGADO EXITOSO';
	ELSE 
		RAISE EXCEPTION 'ERROR, NO SE PUDO CARGAR LA INFORMACION';
    END IF;
    EXCEPTION
		WHEN OTHERS THEN
			RAISE EXCEPTION 'no se pudo ejecutar por %', SQLERRM;

END;
$BODY$;

--test
CALL tablas_sistema_alta('CARGO', 'XD');
CALL tablas_sistema_alta('patologia', 'XD');
CALL tablas_sistema_alta('clasificacion', 'XD');
SELECT * FROM CARGO
ORDER BY ID_CARGO DESC
SELECT * FROM patologia
ORDER BY id_patologia DESC
SELECT * FROM clasificacion
ORDER BY clasificacion DESC

/*
c) Realice un SP que inserte un nuevo tratamiento, la misma recibirá 5 parámetros, el DNI del
paciente, el nombre del medicamento, el DNI del empleado (prescribe tratamiento), la
dosis y el costo. El costo y la dosis deben ser positivas y la fecha_indicacion debe ser la del
sistema. Si la dosis es mayor que el stock del medicamento prescripto, debe mostrar un
mensaje indicando que el stock es insuficiente, de lo contrario debe mostrar un mensaje
indicando si se realizó la inserción correctamente. Nombre sugerido: tratamiento_alta.
*/

CREATE OR REPLACE PROCEDURE public.tratamiento_alta(IN dni_paciente character varying, IN nombre_medicamento character varying, IN dni_empleado character varying, IN dosis_n integer, IN costo_tratamiento numeric(10,2))
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
    IF (dni_paciente IS NULL OR dni_paciente = '' OR dni_empleado IS NULL OR dni_empleado = '' OR nombre_medicamento IS NULL OR nombre_medicamento = '') THEN
        RAISE EXCEPTION 'ERROR EL VALOR DE LOS PARAMETROS NO SON CORRECTOS, RECUERDE QUE NO DEBEN SER NULOS NI CADENAS VACIAS';
    END IF;
    IF (dosis_n < 1 OR costo_tratamiento < 1) THEN
        RAISE EXCEPTION 'ERROR EL VALOR DE LA DOSIS O DEL COSTO SON NEGATIVOS Y TIENEN QUE SER POSITIVOS';
    END IF;
    IF(dosis_n > (SELECT stock FROM medicamento WHERE nombre = nombre_medicamento)) THEN
        RAISE EXCEPTION 'ERROR EL STOCK DEL MEDICAMENTO PRESCRIPTO ES INSUFICIENTE';
    END IF;
    INSERT INTO tratamiento(id_paciente, id_medicamento, fecha_indicacion, prescribe, nombre, descripcion, dosis, costo)
    VALUES((SELECT id_paciente FROM paciente INNER JOIN persona ON id_paciente = id_persona WHERE dni = dni_paciente), (SELECT id_medicamento FROM medicamento WHERE nombre = nombre_medicamento), CURRENT_DATE, (SELECT id_empleado FROM empleado INNER JOIN persona ON id_empleado = id_persona WHERE dni = dni_empleado), nombre_medicamento, (SELECT presentacion FROM medicamento WHERE nombre = nombre_medicamento LIMIT 1), dosis_n, costo_tratamiento );
    IF (FOUND) THEN
        RAISE NOTICE 'CARGADO EXITOSO';
	ELSE 
		RAISE EXCEPTION 'ERROR, NO SE PUDO DAR DE ALTA EL TRATAMIENTO';
    END IF;
    EXCEPTION
		WHEN OTHERS THEN
			RAISE EXCEPTION 'no se pudo ejecutar por %', SQLERRM;

END;
$BODY$;

--test
SELECT * from paciente 
INNER JOIN persona ON id_paciente = id_persona;

SELECT * from empleado 
INNER JOIN persona ON id_empleado = id_persona;

select * from medicamento
ORDER BY ID_MEDICAMENTO desc;

select * from tratamiento
ORDER BY fecha_indicacion DESC;

SELECT id_paciente FROM paciente INNER JOIN persona ON id_paciente = id_persona WHERE dni = '18354930'
SELECT id_medicamento FROM medicamento WHERE nombre = 'FENALGINA R-NF 1500 INY'
CALL tratamiento_alta('18354930','FENALGINA R-NF 1500 INY','37870755', '10', 5000);

/*EJERCICIO 2*/

/*
a) Escriba una función que reciba el nombre de una obra social y devuelva un listado de
todos los pacientes que cuentan con la misma. El listado debe tener id, nombre y apellido
del paciente, sigla y nombre de la obra social.
*/






